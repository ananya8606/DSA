/* Term 1: 1 character
Term 2: 2 characters
Term 3: 4 characters
Term 4: 8 characters
Term 5: 16 characters
...
Term n: 2^n characters

So, the length of the n-th term is approximately 2^n, and the time 
complexity can be approximated as O(2^n) since we iterate through the characters to generate the next term. */

class Solution
{
  public:
 void frequency(string str, int n, vector<string>& res) {
    if (res.size() == n)
        return;
    string s = "";

    for (int i = 0; i < str.size(); i++) {
        int count = 1;
        while (i + 1 < str.size() && str[i] == str[i + 1]) {
            count++;
            i++;
        }
        s += to_string(count) + str[i];
    }
    res.push_back(s);
    frequency(s, n, res);
}

string lookandsay(int n) {
    vector<string> res;
    if(n==1)
    return "1";
    frequency("1", n, res);
    return res[n - 2];
}
};
