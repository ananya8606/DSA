class Solution{
  public:
    /*You are required to complete below function */
    string multiplyStrings(string s1, string s2) {
     // Check if either number is zero
    if (s1 == "0" || s2 == "0") {
        return "0";
    }

    // Determine the sign of the product
    bool isNegative = (s1[0] == '-' && s2[0] != '-') || (s1[0] != '-' && s2[0] == '-');
    
    // Remove the sign from the input strings
    std::string num1 = (s1[0] == '-' ? s1.substr(1) : s1);
    std::string num2 = (s2[0] == '-' ? s2.substr(1) : s2);

    // Perform manual multiplication
    std::string result;
    int n1 = num1.size();
    int n2 = num2.size();
    int numDigits = n1 + n2;

    for (int i = 0; i < numDigits; ++i) {
        result += '0';
    }

    for (int i = n1 - 1; i >= 0; --i) {
        int carry = 0;
        int digit1 = num1[i] - '0';

        for (int j = n2 - 1; j >= 0; --j) {
            int digit2 = num2[j] - '0';
            int currentProduct = (result[i + j + 1] - '0') + (digit1 * digit2) + carry;
            carry = currentProduct / 10;
            result[i + j + 1] = '0' + (currentProduct % 10);
        }

        result[i] = '0' + carry;
    }

    // Remove leading zeros
    int startIdx = 0;
    while (startIdx < numDigits && result[startIdx] == '0') {
        ++startIdx;
    }

    // Add sign if necessary
    if (isNegative) {
        return '-' + result.substr(startIdx);
    } else {
        return result.substr(startIdx);
    }
}

};
