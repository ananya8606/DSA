#include <bits/stdc++.h> 
using namespace std; 
class Solution
{   
public: 
vector<int> spirallyTraverse(vector<vector<int>>& matrix, int r, int c) {
    int tr = 0, br = r - 1, rc = c - 1, lc = 0;
    vector<int> v;
    while (tr <= br && lc <= rc) {
        int i, j;
        // Traverse top row
        for (i = lc; i <= rc; i++) {
            v.push_back(matrix[tr][i]);
        }
        tr++;
        // Traverse right column
        for (j = tr; j <= br; j++) {
            v.push_back(matrix[j][rc]);
        }
        rc--;
        // Traverse bottom row (if applicable)
        if (tr <= br) {
            for (i = rc; i >= lc; i--) {
                v.push_back(matrix[br][i]);
            }
            br--;
        }
        // Traverse left column (if applicable)
        if (lc <= rc) {
            for (j = br; j >= tr; j--) {
                v.push_back(matrix[j][lc]);
            }
            lc++;
        }
    }
    return v;
}
};
int main() {
    int t;
    cin>>t;
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 
        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }
        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<" ";
        cout<<endl;
    }
    return 0;
}
