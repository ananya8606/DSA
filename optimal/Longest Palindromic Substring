/*Time Complexity:O(N).Auxiliary Space:O(N).*/
class Solution {
public:
    string longestPalindrome(string s) {
    int n = s.length();
    if (n == 0) return "";

    string t = "^#";
    for (int i = 0; i < n; i++) {
        t += s.substr(i, 1) + "#";
    }
    t += "$";

    int m = t.length();
    vector<int> P(m, 0);
    int center = 0, right = 0;

    for (int i = 1; i < m - 1; i++) {
        int mirror = 2 * center - i;
        if (right > i) {
            P[i] = min(right - i, P[mirror]);
        }

        while (t[i + 1 + P[i]] == t[i - 1 - P[i]]) {
            P[i]++;
        }

        if (i + P[i] > right) {
            center = i;
            right = i + P[i];
        }
    }

    int maxLen = 0, centerIndex = 0;
    for (int i = 1; i < m - 1; i++) {
        if (P[i] > maxLen) {
            maxLen = P[i];
            centerIndex = i;
        }
    }

    int start = (centerIndex - maxLen) / 2;
    return s.substr(start, maxLen);
}

};