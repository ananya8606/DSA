/*suppose the input string contains n characters, and the function has reached the k-th 
character. At this point, there are two choices: either include the k-th character in the 
current substring or start a new substring with the k-th character. Thus, the function will
make two recursive calls: one with the current substring and the other starting a new substring
with the k-th character. This process continues for each character in the string, leading to 
a total of 2^n recursive calls.
Therefore, the time complexity of the function is O(2^n).
Auxilliary Space Complexity:O(n) for recursion stack + O(n) for r + space taken by ans.
*/
#include <bits/stdc++.h>
bool isvalid(string s, vector<string> &dictionary){
for(int i=0;i<dictionary.size();i++){
  if(dictionary[i].compare(s)==0)  
  return true;
}
  return false;
}
void word(vector<string> &ans,string r,int n,string s, vector<string> &dictionary){
for(int i=1;i<=n;i++){
    string p=s.substr(0,i);
    if (isvalid(p,dictionary)) {
      if (i == n) {
        ans.push_back(r+p);
        return;
      }
     word(ans,r+p+" ",n-i,s.substr(i,n-i),dictionary);
    }
  }
}
vector<string> wordBreak(string &s, vector<string> &dictionary) {
   vector<string> ans;
   word(ans,"",s.size(),s,dictionary);
   return ans;
}
                  