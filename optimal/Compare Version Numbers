/*The space complexity of the corrected code is O(1) because it uses a constant amount of additional
space to store the integers num1 and num2.
The time complexity of the code is O(max(N, M)), where N is the length of version1 and M is the
length of version2. The code iterates over the version strings once, comparing the corresponding 
parts of the version numbers. The time complexity is determined by the length of the longer version
string.*/
class Solution {
public:
    int compareVersion(string version1, string version2) {
        int i = 0;
        int j = 0;
        
        while (i < version1.size() || j < version2.size()) {
            int num1 = 0;
            int num2 = 0;
            
            while (i < version1.size() && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            
            while (j < version2.size() && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            
            if (num1 > num2)
                return 1;
            else if (num1 < num2)
                return -1;
            
            i++;
            j++;
        }
        
        return 0;
    }
};