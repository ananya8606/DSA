/*Time Complexity: O(N)
Reason: We are doing simple tree traversal and changing both root1 and root2 simultaneously.
Space Complexity: O(N)
Reason: In the worst case (skewed tree), space complexity can be O(N).*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool checkmirror(TreeNode* leftside, TreeNode* rightside) {
        if (!leftside && !rightside)
            return true;
        if (!leftside || !rightside)
            return false;

        if (leftside->val != rightside->val)
            return false;

        return checkmirror(leftside->left, rightside->right) && checkmirror(leftside->right, rightside->left);
    }

    bool isSymmetric(TreeNode* root) {
        if (!root)
            return true;

        return checkmirror(root->left, root->right);
    }
};