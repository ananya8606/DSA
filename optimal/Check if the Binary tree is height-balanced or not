/*The time complexity of the code is O(n), and the space complexity: O(1) Extra Space + O(H) 
Recursion Stack space (Where “H”  is the height of binary tree)*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int heightbalance(TreeNode* root,bool &balance){
    if(!root)
    return 0;
    int lh=heightbalance(root->left,balance);
    int rh=heightbalance(root->right,balance);
    if((lh-rh)!=-1 && (lh-rh)!=0 && (lh-rh)!=1)
    balance=false;
    return max(lh,rh)+1;
    }
    bool isBalanced(TreeNode* root) {
        bool balance=true;
        heightbalance(root,balance);
        return balance;
    }
};