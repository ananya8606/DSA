/* Time complexity:
Creating the BSTIterator instances for the left and right pointers takes O(h) time, where h is the 
height of the BST.
The next function is called repeatedly until i becomes greater than or equal to j. In the worst case, 
this loop may iterate over all the nodes in the BST, which takes O(n) time, where n is the number of 
nodes in the BST.
Overall, the time complexity is O(h + n), which is linear in terms of the number of nodes in the BST.
Space complexity:
The BSTIterator class uses a stack sequentialNodes to store the nodes during traversal. The maximum 
size of this stack is the height of the BST, which can be at most O(h).
Additionally, the findTarget function uses two BSTIterator instances and two variables i and j.
Therefore, the space complexity is O(h), where h is the height of the BST.
In summary, the time complexity is O(h + n), and the space complexity is O(h), where h is the height 
of the BST and n is the number of nodes in the BST.*/
class BSTIterator{
    private : 
       stack<TreeNode*> sequentialNodes;
       bool reverse = false; 
       // if reverse is false : next()--> will give us the next(next inorder element) element 
       // if reverse is true : before()--> will give us the before(just 2nd largest) element 
    public :
       BSTIterator(TreeNode* root, bool isReverse){
           reverse = isReverse;
           pushAll(root);           
       }
       int next(){
           TreeNode* nextSmallest = sequentialNodes.top();
           sequentialNodes.pop();
           // to maintain the inorder sequence, push all rights as well
           if(!reverse)
           pushAll(nextSmallest->right);
           else pushAll(nextSmallest->left);
           return nextSmallest->val;
       }
       int hasnext(){
           return (!sequentialNodes.empty());
       }
    private : 
        void pushAll(TreeNode* root){
            while(root!=NULL){
                sequentialNodes.push(root);
               if(reverse==true){
                   root=root->right;
               }
               else{
                    root=root->left;
               }
            }
        }      
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root)return false;
        BSTIterator l(root, false); //left pointer as we have in 2-sum array approach
        BSTIterator r(root, true); //right pointer as we have in 2-sum array approach

        int i = l.next();
        int j = r.next();
        while(i<j){
            if(i+j==k)return true;
            else if(i+j < k)i = l.next();
            else j = r.next();
        }
        return false;
    }
};