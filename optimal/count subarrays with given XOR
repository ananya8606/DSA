/*y^target=XOR of a certain prefix subarray.y=XOR of certain prefix subarray^target.
We have to find number of possible y for a certain prefix subarray.*/
//Time Complexity: O(N).Space Complexity: O(N)
/*the complexity of worst-case searching for an unordered_map can go up to O(N),
 hence it is safer to use ordered_map. But if we use ordered_map then the time 
 complexity will be O(N logN). Space complexity will be the same in both cases.*/
#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
int subarraysXor(vector<int> &arr, int x)
{
    //    Write your code here.
    unordered_map<int,int>m;
    int y=0;
    int ex=0;
    int cnt=0;
    for(int i=0;i<arr.size();i++){
    ex^=arr[i];//finding xor of certain prefix subarray
    y=ex^x;//finding y
    if(ex==x) //if xor of a certain prefix subarray == target
    cnt++;
    if(m.find(y)!=m.end()){ //y is found in map
    cnt+=m[y];//adding count of y
    }
    m[ex]=m[ex]+1;//storing count of a certain xor in map
    }
    return cnt;
}