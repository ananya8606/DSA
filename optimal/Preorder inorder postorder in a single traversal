/*Time Complexity: O(N)
Reason: We are visiting every node thrice therefore time complexity will be O(3*N), which can be 
assumed as linear time complexity.
Space Complexity: O(N)
Reason: We are using three lists and a stack to store the nodes. The time complexity will be about 
O(4*N), which can be assumed as linear time complexity.**/

#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
    stack<pair<BinaryTreeNode<int>*,int>>s;
    vector<int>pre;
    vector<int>in;
    vector<int>post;
    vector<vector<int>>ans;
    if(!root)
    return ans;
    s.push({root,1});
    while(!s.empty()){
        auto it=s.top();
        s.pop();
        if(it.second==1){
            pre.push_back(it.first->data);
            it.second++;
            s.push(it);
            if(it.first->left) {
                s.push({it.first->left,1});
            }
        }
        else if(it.second==2){
            in.push_back(it.first->data);
            it.second++;
            s.push(it);
            if(it.first->right) {
                s.push({it.first->right,1});
            }
        }
        else{
            post.push_back(it.first->data);
        }
    }
    ans.push_back(in);
    ans.push_back(pre);
    ans.push_back(post);
    return ans;
}