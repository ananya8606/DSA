/*Time Complexity: O(N).
Reason: We are doing a tree traversal.
Space Complexity: O(N)
Reason: Space is needed for the recursion stack. In the worst case (skewed tree), space complexity 
can be O(N).*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int PathSum(TreeNode* root,int &sum){
    if(!root)
    return 0;
    int left=max(0,PathSum(root->left,sum));
    int right=max(0,PathSum(root->right,sum));
    sum=max(sum,(root->val+left+right));
    return max(left,right)+root->val;
    }
    int maxPathSum(TreeNode* root) {
    int sum=INT_MIN;
    PathSum(root,sum);
    return sum;
    }
};