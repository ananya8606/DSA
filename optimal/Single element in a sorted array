//Time Complexity:O(logn).Space Complexity:O(1).
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        if(nums.size()==1)
        return nums[0];
        int l=0;
        int h=nums.size()-1;
        while (l <= h) {
        int mid = (l + h) /2;
        if(mid==0 && nums[mid] != nums[mid+1])
        return nums[mid];
        else if(mid==nums.size()-1 && nums[mid] != nums[mid-1])
        return nums[mid];
        else if (nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1]) {
        return nums[mid];
        }
        else if(nums[mid]==nums[mid-1] && (nums.size()-1-mid)%2==1){
        l=mid+1;
        }
        else if(nums[mid]==nums[mid-1] && (mid)%2==0){
        h=mid-1;
        }
        else if(nums[mid]==nums[mid+1] && (nums.size()-1-mid)%2==0){
        l=mid+1;
        }
        else if(nums[mid]==nums[mid+1] && (mid)%2==1){
        h=mid-1;
        }
        else
        return -1;
     }
     return -1;
    }
};