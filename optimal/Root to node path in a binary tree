/*Time Complexity: O(N)
Reason: We are doing a simple tree traversal.
Space Complexity: O(N)
Reason: In the worst case (skewed tree), space complexity can be O(N).*/
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
bool getPath(TreeNode * root, vector < int > & arr, int x) {
  // if root is NULL
  // there is no path
  if (!root)
    return false;

  // push the node's value in 'arr'
  arr.push_back(root ->val);

  // if it is the required node
  // return true
  if (root -> val == x)
    return true;

  // else check whether the required node lies
  // in the left subtree or right subtree of
  // the current node
  if (getPath(root -> left, arr, x) ||
    getPath(root -> right, arr, x))
    return true;

  // required node does not lie either in the
  // left or right subtree of the current node
  // Thus, remove current node's value from
  // 'arr'and then return false   
  arr.pop_back();
  return false;
}
vector<int> solve(TreeNode* A, int B) {
    vector<int>ans;
    if(getPath(A,ans,B))
    return ans;
    else
    return {};
}





