/*Time complexity:O(N)
Space complexity:O(N)*/
/*Method 1*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* convert(vector<int>& preorder, int start, int end) {
        if (start > end)
            return nullptr;

        TreeNode* root = new TreeNode(preorder[start]);
        int b = -1;
        for (int i = start + 1; i <= end; i++) {
            if (preorder[i] > root->val) {
                b = i;
                break;
            }
        }

        if (b != -1) {
            root->left = convert(preorder, start + 1, b - 1);
            root->right = convert(preorder, b, end);
        }
        else {
            root->left = convert(preorder, start + 1, end);
            root->right = nullptr;
        }

        return root;
    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        return convert(preorder, 0, preorder.size() - 1);
    }
};
/*Method 2*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(vector<int>& preorder,int min,int max,int &ind){
        if(ind>=preorder.size()){
            return NULL;
        }
        if(preorder[ind]<min || preorder[ind]>max){
            return NULL;
        }
        TreeNode* root =new TreeNode(preorder[ind++]);
        root->left=solve(preorder,min,root->val,ind);
        root->right=solve(preorder,root->val,max,ind);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
     int min=INT_MIN;
     int max=INT_MAX;
     int ind=0;
     return solve(preorder,min,max,ind);
    }
};