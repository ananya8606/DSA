/*Time Complexity: O(N)
Reason: We are doing a simple level order traversal. The inner loop simply traverses the nodes 
level-wise and doesnâ€™t add to the complexity.
Space Complexity: O(N)*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
        if(!root)
        return 0;
        long int width=0;
        q.push({root,1});
        while(!q.empty()){
        int level=q.size();
        long int start=q.front().second;
        long int end=q.back().second;
        width=max(width,end-start+1);
        for(int i=0;i<level;i++){
        TreeNode* cur=q.front().first;
        long int curidx=q.front().second-start;
        q.pop();
        if(cur->left)
        q.push({cur->left,2*curidx});
        if(cur->right)
        q.push({cur->right,2*curidx+1});
        }
        }
        return width;
    }
};