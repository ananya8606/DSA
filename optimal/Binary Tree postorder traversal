/*Time Complexity: O(N) where N is number of nodes in Binary Tree.
Auxiliary Space: If we donâ€™t consider the size of the stack for function calls then O(1) otherwise 
O(h) where h is the height of the tree. */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
 vector<int> v;
    
    void postorderTraversalHelper(TreeNode* root) {
        if (!root) return;
        postorderTraversalHelper(root->left);
        postorderTraversalHelper(root->right);
          v.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        postorderTraversalHelper(root);
        return v;
    }
};