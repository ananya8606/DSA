/*Time Complexity: O(V+E) where V is the number of vertices and E is the number of edges in the graph.
Auxiliary Space: O(V), since a map is used to store the graph nodes which can grow upto V.*/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node)
            return nullptr;

        unordered_map<Node*, Node*> a;
        return cloneNode(node, a);
    }

    Node* cloneNode(Node* node, unordered_map<Node*, Node*>& a) {
        if (a.count(node))
            return a[node];

        Node* clone = new Node(node->val);
        a[node] = clone;

        for (Node* neighbor : node->neighbors) {
            clone->neighbors.push_back(cloneNode(neighbor,a));
        }

        return clone;
    }
};

