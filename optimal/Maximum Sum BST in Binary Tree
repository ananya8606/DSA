/*The time complexity of the maxSumBST function is O(N), where N is the number of nodes in the binary 
tree. This is because we need to traverse each node in the tree once to determine the maximum sum.
The space complexity of the maxSumBST function is O(H), where H is the height of the binary tree.*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class NodeValue{
  public: 
    int maxValue;
    int minValue;
    int nodeSum;
    NodeValue(int min, int max, int sum){
        maxValue = max;
        minValue = min;
        nodeSum = sum;
    }
};

class Solution {
public:
    int ans = 0;
    NodeValue largestBSTHelper(TreeNode* root){
        if(!root) return NodeValue(INT_MAX,INT_MIN,0);
        
        auto left = largestBSTHelper(root->left);
        auto right = largestBSTHelper(root->right);
        
        if(left.maxValue < root->val && right.minValue > root->val){

            int curr_sum = root->val + left.nodeSum + right.nodeSum;
            ans = max(ans,curr_sum);

            return NodeValue(min(left.minValue,root->val),max(root->val,right.maxValue),curr_sum);
        }
        else
            return NodeValue(INT_MIN,INT_MAX,0);
    }

    int maxSumBST(TreeNode* root) {
        largestBSTHelper(root);
        root->left = nullptr;
        root->right = nullptr;
        return ans;
    }
};