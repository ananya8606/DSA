/*Time Complexity=O(N).Space Complexity:O(k)*/
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq; // double-ended queue to keep track of maximum elements
        vector<int> ans;
        int x=0,c=0;
        for(int i=0;i<nums.size();i++){
        while(!dq.empty() && dq.back()<nums[i])
        {
        dq.pop_back();
        }
        dq.push_back(nums[i]);
        x++;
        if(x==k){
        c++;
        ans.push_back(dq.front());
        if(dq.front()==nums[c-1])
        dq.pop_front();
        x=k-1;
        }
        }
        return ans;
    }
};
