/*Time Complexity: O(N log N) + O(N*M).
O(N log N ) for sorting the jobs in decreasing order of profit. O(N*M) since we are 
iterating through all N jobs and for every job we are checking from the last deadline,
 say M deadlines in the worst case.
Space Complexity: O(M) for an array that keeps track on which day which job is performed
 if M is the maximum deadline available.*/
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    static bool compare(Job a, Job b) {
        return a.profit > b.profit; // sort in descending order of profit
    }

    vector<int> JobScheduling(Job arr[], int n) { 
        sort(arr, arr + n, compare);
        int max_deadline = 0;
        for (int i = 0; i < n; i++) {
            max_deadline = max(max_deadline, arr[i].dead);
        }
        vector<int> jobs(max_deadline, -1);
        int count = 0, profit = 0;
        for (int i = 0; i < n; i++) {
            int deadline = arr[i].dead - 1;
            while (deadline >= 0 && jobs[deadline] != -1) {
                deadline--;
            }
            if (deadline >= 0) {
                jobs[deadline] = arr[i].id;
                count++;
                profit += arr[i].profit;
            }
        }
        return {count, profit};
    } 
};
