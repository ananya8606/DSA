/*Time Complexity: O(N)
Space Complexity: O(N)*/
#include <bits/stdc++.h> 
/*************************************************************
 
    Following is the Binary Tree node structure.

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> bottomView(BinaryTreeNode<int> * root){

    // Write your code here.
    vector<int> v;
    map<int,int>m;
    if(!root)
    return v;
    queue<pair<BinaryTreeNode<int>*,int>>q;
    q.push({root,0});
    while(!q.empty()){
        auto it=q.front();
        q.pop();
        BinaryTreeNode<int>* node=it.first;
        int level=it.second;
        m[level]=node->data;
        if(node->left)
        q.push({node->left,level-1});
        if(node->right)
          q.push({node->right, level + 1});
    }
    for(auto it:m){
     v.push_back(it.second);
    }
    return v;
}
