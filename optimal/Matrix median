/*The outer binary search runs for log(r-l) iterations, and for each iteration, 
the inner binary search runs for m rows, with each row taking log(n) iterations. 
Therefore, the overall time complexity is O(m * n * log(r-l)).
Space complexity of this algorithm is O(1).*/
bool func(vector<vector<int>> &mat, int mid, int B) {
    int count = 0;
    for (int i = 0; i < mat.size(); i++) {
        int j = mat[0].size() - 1;
        int l = 0;
        while (l <= j) { 
            int m = l + (j - l) / 2; 
            if (mat[i][m] <= mid) {
                count += m - l + 1;
                l = m + 1;
            } else {
                j = m - 1;
            }
        }
    }
    return count >= B;
}

int getMedian(vector<vector<int> > &mat) {

    // Total no. of elements is odd
    int m=mat.size();
    int n=mat[0].size();

    // Apply binary search from l=1 to r=10^9
    // if(func(mid , mat)>=(m*n-1)/2 + 1)
    // ans = mid , moves to r=mid-1 else l=mid+1

    int l=1 , r=1e9;
    int B=(m*n-1)/2 + 1;
    int ans=1;
    while(l<=r)
    {
         int mid=(l + (r-l)/2);

         if(func(mat , mid , B))
         {
             ans=mid;
             r=mid-1;
         }
         else
         {
             l=mid+1;
         }
    }
   
    return ans;

}
