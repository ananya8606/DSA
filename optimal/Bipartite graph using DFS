/*The time complexity of the modified code is O(V + E), where V is the number of vertices and E is 
the number of edges in the graph. This is because we perform a DFS traversal of the graph, visiting 
each vertex and each edge once.
The space complexity of the code is O(V), where V is the number of vertices in the graph.*/
class Solution {
public:
   bool dfs(int i,vector<vector<int>>& graph,vector<int>& color){
           for(auto it:graph[i])
           {
               if(color[it]==-1)
               {
                color[it] = !color[i]; 
                if(dfs(it,graph,color)==false)
                return false;
           }
               else
               {
               if(color[i]==color[it])
               return false;
               }
           }
       return true;
   }
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> color(n,-1);
        for(int i=0;i<n;i++)
        {
                if(color[i]==-1){
                color[i]=0;
                if(dfs(i,graph,color)==false){
                return false;
                }
        }
    }
    return true;
    }
};