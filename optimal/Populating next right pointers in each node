/*The time complexity of the connect function in the given code is O(n), where n is the number of 
nodes in the binary tree. This is because the function traverses each node once.
Space Complexity:O(logn), required for recursive stack. The maximum depth of recursion is equal to 
the height of tree which in this case of perfect binary tree is equal to O(logn).*/
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root)
        return NULL;
        if(!root->next)
        root->next=NULL;
        if(root->left && root->right){
        if(root->next)
        root->right->next=root->next->left;
        root->left->next=root->right;
        connect(root->left);
        connect(root->right);
        }
        return root;
    }
};