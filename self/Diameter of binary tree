/*The maxheight function has a time complexity of O(n), where n is the number of nodes in the binary 
tree. It visits each node once to compute the maximum height.
The diameterOfBinaryTree function performs a level order traversal using a queue. In the worst case, 
all nodes are visited, resulting in a time complexity of O(n).
Therefore, the overall time complexity of the code is O(n^2) in the worst case.
The overall space complexity is O(n) in the worst case.*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxheight(TreeNode* root){
        if(!root)
        return 0;
        return max(maxheight(root->left),maxheight(root->right))+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        int diameter=0;
        while(!q.empty()){
        int size=q.size();
        for(int i=0;i<size;i++){
        TreeNode* cur=q.front();
        q.pop();
        if(cur->left)
        q.push(cur->left);
        if(cur->right)
        q.push(cur->right);
        int lh=maxheight(cur->left);
        int rh=maxheight(cur->right);
        diameter=max(diameter,lh+rh);
        }
        }
        return diameter;
    }
};