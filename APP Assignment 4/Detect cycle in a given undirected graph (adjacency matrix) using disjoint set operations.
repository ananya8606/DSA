/* Detect cycle in a given undirected graph (adjacency matrix) using disjoint set operations.
Input: (T, |Vi|, Adji)
2
5
0 1 1 1 1
1 0 1 1 0
1 1 0 0 1
1 1 0 0 0
1 0 1 0 0
3
6
0 1 0 0 0 0
1 0 1 0 0 0
0 1 0 1 0 0
0 0 1 0 1 0
0 0 0 1 0 1
0 0 0 0 1 0  */

#include<stdio.h>
#include<stdlib.h>
void makeset(int n,int parent[n],int rank[n])
{
for(int i=1;i<=n;i++)
{
parent[i]=i;
rank[i]=0;
}
}
int findPar(int a,int n,int parent[n],int rank[n])
{
if(parent[a]==a)
return a;
return parent[a]=findPar(parent[a],n,parent,rank);
}
int U(int a,int b,int n,int parent[n],int rank[n])
{
a=findPar(a,n,parent,rank);
b=findPar(b,n,parent,rank);
if(a == b)
{
return 1;
}
if(rank[a]>rank[b])
{
parent[b]=a;
}
else if(rank[b]>rank[a])
{
parent[a]=b;
}
else
{
parent[b]=a;
rank[a]++;
}
return 0;
}
int main()
{
int t;
scanf("%d",&t);
while(t--)
{
int n;
scanf("%d",&n);
int parent[n+1];
int rank[n+1];
int arr[n][n];
int cycle=0;
makeset(n,parent,rank);
for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
{
scanf("%d",&arr[i][j]);
}
}
for(int i=0;i<n;i++)
{
for(int j=i+1;j<n;j++)
{
if(arr[i][j]==1)
{
    if(U(i+1,j+1,n,parent,rank))
    cycle=1;
}
}
}
if(cycle==1)
printf("Yes");
else
printf("No");
printf("\n");
}
return 0;
}
