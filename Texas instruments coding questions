Q1. Josephus
‘N’ people are standing in a circle numbered from ‘1’ to ‘N’ in clockwise order. First, the person numbered 1 will proceed in a clockwise direction and will skip K-1
persons including itself and will kill a Kth person. Now (K+1)th person from 1 will start and will kill the Kth person from itself.
You have to find the position of the last person surviving with respect to initial numbering.
Note:
A person can also kill himself.
Input Format
The first line of input contains an integer ‘T’ denoting the number of test cases. The first and only line of each test case contains two integers ‘N’ and ‘K’. Where 
‘N’ is the total no of persons standing around circle and ‘K’ number indicates kth person is killed.
Output Format
For each test case, return a single integer denoting the position of the last person surviving.
Note:
You are not required to print the output explicitly, it has already been taken care of. Just implement the function.
Constraints
1 <= ’T’ <= 50 1 <= ’N’,’K’ <= 10^4 Time Limit: 1 sec


Q2. Meetings II
Stark Industry is planning to organize Stark Expo, for which various departments have to organize meetings to check their preparations. Since Stark Tower has limited 
rooms available for the meeting, Tony decided to allot a room to each meeting so that all the meetings are organized in the least possible conference rooms, and a the 
moment, only one meeting will happen in one room. So, he asked JARVIS to allot each meeting a room and tell the minimum number of conference rooms to be reserved. But, 
since JARVIS was busy rendering another Iron Man suit model, he asked you to help.
You are given an array of integers ARR of size N x 2, representing the start and end time for N meetings. Your task is to find the minimum number of rooms required to 
organize all the meetings.
Note:
1. You can assume that all the meetings will happen on the same day. 2. Also, as soon as a meeting gets over if some other meeting is scheduled to start at that moment, 
they can then be allocated that room.
Note:
Try to solve the problem in linear time complexity.
For Example:
Consider there are three meetings scheduled with timings: 1pm - 4pm 3pm - 5pm 4pm - 6pm At the start of time, meeting 1 will be allotted room 1, which will be occupied 
till 4 pm hence for meeting 2 we’ll have to provide another room. At 4 pm, meeting 3 can be organized in room 1 because by that time, meeting 1 would have ended.
Hence we’ll require two rooms for holding all three meetings.
Input format
The first line of input contains an integer 'T' representing the number of the test cases. Then the test case follows. The first line of each test case contains an 
integer ‘N’ representing the number of meetings scheduled. The second line of each test case contains N space-separated integers representing the start time for each 
meeting. The third line of each test case contains N space-separated integers representing the end time for each meeting.
Output Format
For each test case, print the minimum number of conference rooms required. The output of each test case should be printed in a separate line.
Note:
You do not need to print anything; it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 100 1 <= N <= 1000 0000 <= INTERVAL[start][end] <= 2359 where 'T' is the number of test cases, 'N' is the number of meetings, and 'INTERVAL[start][end]'
represents the starting time and ending time of a meeting. Time limit: 1 second


Q1. Snake and Ladder
You have been given a Snake and Ladder Board with 'N' rows and 'N' columns with the numbers written from 1 to (N*N) starting from the bottom left of the board, and 
alternating direction each row.
For example
For a (6 x 6) board, the numbers are written as follows:
You start from square 1 of the board (which is always in the last row and first column). On each square say 'X', you can throw a dice which can have six outcomes 
and you have total control over the outcome of dice throw and you want to find out the minimum number of throws required to reach the last cell. Some of the squares 
contain Snakes and Ladders, and these are possibilities of a throw at square 'X': You choose a destination square 'S' with number 'X+1', 'X+2', 'X+3', 'X+4', 'X+5', 
or 'X+6', provided this number is <= N*N. If 'S' has a snake or ladder, you move to the destination of that snake or ladder. Otherwise, you move to S. A board square 
on row 'i' and column 'j' has a "Snake or Ladder" if board[i][j] != -1. The destination of that snake or ladder is board[i][j].
Note :
You can only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue 
moving - you have to ignore the snake or ladder present on that square. For example, if the board is: -1 1 -1 -1 -1 9 -1 4 -1 Let's say on the first move your
destination square is 2 [at row 2, column 1], then you finish your first move at 4 [at row 1, column 2] because you do not continue moving to 9 [at row 0, column 0] 
by taking the ladder from 4. A square can also have a Snake or Ladder which will end at the same cell. For example, if the board is: -1 3 -1 -1 5 -1 -1 -1 9 Here we 
can see Snake/Ladder on square 5 [at row 1, column 1] will end on the same square 5.
Input format :
The first line of each test case or query contains a single integer value, 'N' representing the 'rows' and 'columns' for the two-dimensional square matrix. The Second 
line onwards, the next 'N' lines or rows represent the ith row values. Each of the i-th row constitutes 'N' column values separated by a single space.
Note :
'-1' denotes the square doesn't contain any Snake or Ladder.
Output format :
The only line of output prints the minimum number of throws required to reach the last cell of the board. If it is impossible to reach the last cell of the board, then 
print -1.
Constraints :
1 <= N <= 10 ^ 2 1 <= board[i][j] <= N*N or board[i][j] = -1 Where (NxN) is the size of the board.



Q2. Largest rectangle in a histogram
You have been given an array/list 'HEIGHTS' of length ‘N. 'HEIGHTS' represents the histogram and each element of 'HEIGHTS' represents the height of the histogram bar. Consider that the width of each histogram is 1.
You are supposed to return the area of the largest rectangle possible in the given histogram.
For example :
In the below histogram where array/list elements are {2, 1, 5, 6, 2, 3}.
The area of largest rectangle possible in the given histogram is 10.
Input format :
The first line contains a single integer ‘T’ denoting the number of test cases. The first line of each test case contains a single integer ‘N’ denoting the number of elements in the array/list. The second line 
contains ‘N’ single space-separated integers denoting the elements of the array/list.
Output format :
For each test case, print an integer denoting the area of the largest rectangle possible in the given histogram.
Note :
You do not need to print anything; it has already been taken care of. Just implement the given function.
Constraints :
1 <= T <= 10 1 <= N <= 10^6 0 <= HEIGHTS[i] <= 10^9 Where ‘T’ is the number of test cases. 'N' is the length of the given array/list. And, HEIGHTS[i] denotes the height 
of the 'ith' histogram bar. Time Limit: 1 sec.



Q1. Maximum sum rectangle
You are given an M X N matrix of integers ARR. Your task is to find the maximum sum rectangle.
Maximum sum rectangle is a rectangle with the maximum value for the sum of integers present within its boundary, considering all the rectangles that can be formed 
from the elements of that matrix.
A rectangle is a 2-D polygon with opposite sides parallel and equal to each other.
For example:
Consider following matrix: 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 The rectangle (1,1) to (3,3) is the rectangle with the maximum sum, 
i.e. 29. 1 2 -1 -4 -20 -8 |-3 4 2 | 1 3 | 8 10 1 | 3 -4 |-1 1 7 | -6
Input Format :
The first line of input contains an integer 'T' representing the number of the test case. Then the test case follows. The first line of each test case contains two 
space-separated integers M and N representing the size of the matrix ARR. Each of the next M lines contains N space-separated integers representing the elements of 
the matrix ARR.
Output Format :
For each test case, return the value of the sum for the maximum sum rectangle.
Note:
You do not need to print anything; it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 10 1 <= M, N <= 100 -10^5 <= ARR[i] <=10^5 Time Limit : 1 sec



Q2. XOR Query
Assume you initially have an empty array say ‘ARR’.
You need to return the updated array provided that some ‘Q’ number of queries were performed on this array.
The queries are of two types:
1. 1 ‘VAL’, for this type of query, you need to insert the integer 'VAL' to the end of the array. 2. 2 ‘VAL’, for this type of query, you need to take the bitwise 
XOR of all the elements of the array with 'VAL' i.e each element of the array ‘ARR’ will be updated as ‘ARR[i]’ = ‘ARR[i]’ ^ ‘VAL’ ( ^ denotes the bitwise XOR operation).
Note:
1) Bitwise XOR operation takes two numbers and performs XOR operation on every bit of those two numbers. For example, consider two numbers 2 and 3 their bitwise XOR 
will be 1. Because the binary representation of 2 is '10' and the binary representation of 3 is '11'. And XOR of '10' and '11' will be '01'(because XOR evaluates to 
0 if the corresponding bits are the same in both the operands, otherwise it evaluates to 1), which is equal to 1. 2) The first query will always be a type 1 query. 3) 
Note that the ith query should be performed on the array obtained after performing (i-1)th query on the array and so on i.e the changes of each query are updated on 
the original array itself.
Input Format:
The first line contains an integer ‘T’ which represents the number of test cases. The first line of each test case contains an integer ‘Q’ denoting the number of 
queries. Then each of the ‘Q’ lines contains two space-separated integers denoting the query to be performed.
Output Format:
For each test case, return the updated array after processing all the queries.
Note:
You do not need to print anything, it has already been taken care of. Just implement the given function.
Constraints:
1 <= T <= 10 1 <= Q <= 10^5 1 <= Val <= 10^9 Time Limit: 1sec
Follow Up:
Can you solve this in constant i.e O(1) space complexity? Space used to return the list will not be counted as an extra space.
